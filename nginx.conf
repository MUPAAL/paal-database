server {
    listen 80;
    server_name localhost;

    # API requests
    location /api/ {
        proxy_pass http://backend:5005/api/;
        proxy_set_header Host $host:8080;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port 8080;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;

        # CORS headers for API
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE, PATCH" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Handle OPTIONS method for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE, PATCH";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    # Socket.io requests
    location /socket.io/ {
        proxy_pass http://backend:5005/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host:8080;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port 8080;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    # Next.js HMR (Hot Module Replacement)
    location /_next/webpack-hmr {
        proxy_pass http://frontend:3000/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host:8080;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port 8080;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_error;
    }

    # Next.js static files
    location /_next/static/ {
        proxy_pass http://frontend:3000/_next/static/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 8080;
        expires 365d;
        access_log off;
        
        # Add error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_error;
    }

    # All other requests go to the Next.js server
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 8080;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        
        # Add error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_error;
    }
    
    # Error handling for frontend
    location @frontend_error {
        # Return a custom error page
        add_header Content-Type text/html;
        return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Application Loading</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            max-width: 600px;
            margin: 0 auto;
        }
        h1 {
            color: #333;
        }
        p {
            color: #666;
            margin-bottom: 20px;
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 10px 2px;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
    <script>
        // Auto-refresh the page after 5 seconds
        setTimeout(function() {
            window.location.reload();
        }, 5000);
    </script>
</head>
<body>
    <div class="container">
        <h1>Application is Starting</h1>
        <p>Please wait while the application is loading. This may take a few moments.</p>
        <div class="loader"></div>
        <p>The page will automatically refresh when the application is ready.</p>
        <button class="button" onclick="window.location.reload()">Refresh Now</button>
    </div>
</body>
</html>';
    }
}
