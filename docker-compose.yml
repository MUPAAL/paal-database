services:
  mongo:
    image: mongo:latest # Change 'server:1.0.1' to official mongo image
    container_name: ${DATABASE_HOST}
    restart: always
    env_file: .env
    # build:
    #   context: ./database
    #   dockerfile: Dockerfile.mongo
    #we comment this out because MONGO_INITDB depreciated auth, and we use --auth
    environment:
      #this will allow for direct connection to database vars via ENV file constraints
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE_COLLECTION}
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    networks:
      - app-net
    command: [ "mongod", "--replSet", "rs0", "--keyFile", "/etc/secrets/security.keyFile" ]
    volumes:
      - database-v:/data/db
      - ./database/sslkey/security.keyFile:/etc/secrets/security.keyFile:ro

  mongo-init:
    image: mongo:latest
    container_name: mongo-init
    depends_on:
      - mongo
    restart: "on-failure"
    entrypoint: [ "/bin/bash", "/setup.sh" ]
    volumes:
      - ./database/setup.sh:/setup.sh:ro
      - .env:/env/.env:ro #mounting .env so we can hide login info from script
    networks:
      - app-net

  seed-admin:
    image: server:1.0.0
    container_name: seed-admin
    depends_on:
      - mongo
      - mongo-init
      - backend
    restart: "on-failure"
    command: [ "node", "/usr/server/server/scripts/create-direct-users.js" ]
    env_file: .env
    networks:
      - app-net
    volumes:
      - ./:/usr/server

  backend:
    image: server:1.0.0
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: dev
    container_name: ${SERVER_HOST}
    depends_on:
      - mongo
    networks:
      - app-net
    env_file: .env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./server:/usr/src/app/server
      - backend-node-modules:/usr/src/app/node_modules

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: dev
    container_name: frontend
    depends_on:
      - backend
    networks:
      - app-net
    ports:
      - "3000:3000"
    env_file: .env
    environment:
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    volumes:
      - ./src:/usr/src/app/src
      - ./public:/usr/src/app/public
      - ./next.config.mjs:/usr/src/app/next.config.mjs
      - ./tailwind.config.ts:/usr/src/app/tailwind.config.ts
      - ./postcss.config.mjs:/usr/src/app/postcss.config.mjs
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - frontend-node-modules:/usr/src/app/node_modules

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "8080:80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-net
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

networks:
  app-net:
    driver: bridge

volumes:
  backend-node-modules:
    name: "backend-node-modules"
  frontend-node-modules:
    name: "frontend-node-modules"
  database-v:
    name: "database-v"
